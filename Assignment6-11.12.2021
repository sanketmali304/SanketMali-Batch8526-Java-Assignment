1. Write a Java program to associate the specified value with the specified key in a Tree Map. 
Ans:
package com;
import java.util.*;
public class Q1 {
public static void main(String[] args) {
	TreeMap<Integer,String> tm= new TreeMap<Integer,String>();
	tm.put(1, "Sanket");
	tm.put(2, "Omkar");
	tm.put(3, "Akash");
	tm.put(4, "Akshay");
	for(Map.Entry<Integer, String> e:tm.entrySet())
	{
		System.out.println(e.getKey()+"=>"+e.getValue());
	}
	}
}

2. Write a Java program to copy a Tree Map content to another Tree Map. 
Ans:
package com;
import java.util.*;
public class Q2 {
	public static void main(String[] args) {
	TreeMap<Integer,String> tm1=new TreeMap<Integer,String>();
	tm1.put(1,"Pune");
	tm1.put(2,"Ahmednagar");
	tm1.put(3,"Mumbai");
	tm1.put(4,"Nashik");
	System.out.println("Tree Map 1:"+tm1);
	
	TreeMap<Integer,String> tm2=new TreeMap<Integer,String>();
	tm2.put(5,"Maharashtra");
	tm2.put(6,"Delhi");
	System.out.println("Tree Map 2:"+tm2);
	
	tm2.putAll(tm1);
	System.out.println("Copy Tree Map:"+tm2);
	}
}

3. Write a Java program to search a key in a Tree Map.
Ans:
//3. Write a Java program to search a key in a Tree Map.
package com;
import java.util.*;
public class Q3 {
	public static void main(String[] args){
		Scanner sc=new Scanner(System.in);
		TreeMap<Integer,String> tm=new TreeMap<Integer,String>();
		tm.put(1,"Apple");
		tm.put(2,"Orange");
		tm.put(3,"Mango");
		tm.put(4,"Stroberi");
		System.out.println("Enter A Key:");
		int k=sc.nextInt();
		if(tm.containsKey(k))
			System.out.println(k+" key is Found");
		else
			System.out.println(k+" key is not Found");
		sc.close();
	}
}

4. Write a Java program to search a value in a Tree Map.
Ans:
//4. Write a Java program to search a value in a Tree Map.
package com;
import java.util.*;
public class Q4 {
	public static void main(String[] args) {
	Scanner sc=new Scanner(System.in);
	TreeMap<Integer,String> tm=new TreeMap<Integer,String>();
	tm.put(1, "Blue");
	tm.put(2, "Black");
	tm.put(3, "Yellow");
	tm.put(4, "White");
	tm.put(5, "Pink");
	System.out.println("Enter A String:");
	String s=sc.nextLine();
	if(tm.containsValue(s))
		System.out.println(s+" Value is Found");
	else
		System.out.println(s+" Value is Found");
	sc.close();
	}
}

5. Write a Java program to get all keys from the given a Tree Map. 
Ans:
//5. Write a Java program to get all keys from the given a Tree Map. 
package com;
import java.util.*;
public class Q5 {
	public static void main(String[] args) {
		TreeMap<Integer,String> tm=new TreeMap<Integer,String>();
		tm.put(1, "Blue");
		tm.put(2, "Black");
		tm.put(3, "Yellow");
		tm.put(4, "White");
		tm.put(5, "Pink");
		System.out.print("Get All The Keys:");
		for(Map.Entry<Integer, String> e:tm.entrySet())
		{
			System.out.print(e.getKey()+",");
		}
	}

}

6. Write a Java program to delete all elements from a given Tree Map. 
Ans:
//6. Write a Java program to delete all elements from a given Tree Map. 
package com;
import java.util.*;
public class Q6 {
	public static void main(String[] args) {
		TreeMap<Integer,String> tm=new TreeMap<Integer,String>();
		tm.put(1, "Java Programming");
		tm.put(2, "C Programming");
		tm.put(3, "C++ Programming");
		tm.put(4, "Python Programming");
	System.out.println("Tree Map:"+tm);
	tm.clear();
	System.out.println("Empty Tree Map:"+tm);
	}
}

7. Write a Java program to sort keys in Tree Map by using comparator. 
Ans:
8. Write a Java program to get a key-value mapping associated with the greatest key and the least key in a map. 
9. Write a Java program to get the first (lowest) key and the last (highest) key currently in a map. 
10. Write a Java program to get a reverse order view of the keys contained in a given map. 

